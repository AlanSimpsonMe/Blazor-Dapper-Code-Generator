@using System;
@using BlazorDapperCodeGen.Data
@using Pluralize.NET.Core
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions

@page "/"

<h1>Blazor Dapper Code Generator</h1>
<p>Creates barebones code for Blazor Dapper CRUD for one database table. Note that the <strong>Namespace</strong> name is the name of your project folder (also the name of the solution). For best results <strong>make the first field the primary key</strong>, and include a <strong>Bit field named IsActive</strong>.</p>
<div class="controls">
    <EditForm Model="@codetemplate" OnValidSubmit="@generate">
        <div class="lefthalf">
            <table>
                <tr>
                    <td>Namespace:</td>
                    <td>
                        <input type="text" @bind="@codetemplate.NamespaceName" required /><br />

                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <span class="muted">Case Sensitive project folder name</span>
                    </td>
                </tr>
                <tr>
                    <td>Make sure the name you provide <em>exactly</em> matches the folder name of your product, no spaces! </td>
                </tr>

            </table>

        </div>
        <div class="righthalf">
            <p>Paste the SQL CREATE TABLE code below so this app can see the table name, field names, and data types. Just from CREATE TABLE to the end of the last column definition.</p>
<textarea rows="10" @bind="@codetemplate.TableDesign" required>


</textarea>
            <p style="text-align:center">
                <input type="submit" value="Go">

            </p>
        </div>
    </EditForm>
</div>
<code>
    <pre>
    @codetemplate.GeneratedCode
</pre>
</code>
<p style="clear:both;">To get the SQL Server CREATE TABLE statement in SQL Server Management Studio or SQL Server Object Explorer or a similar tool, right-click the table name, choose Script As > CREATE To > New Query Window and select the SQL code from CREATE TABLE to the end of the last column definition. If you get it wrong, this won't work.</p>
<p style="text-align:center">
    <img src="../images/Instruction.png" />
</p>


@code{ Codetemplate codetemplate = new Codetemplate();
    string tablename, primaryKey, sqlfieldsinsert1, sqlfieldsinsert2, sqlfieldsupdate, modelfield, parametersadd, inputtag, sqldelete, sqlselectall, sqlselectone, sqlinsert, sqlupdate, sqlsearch;
    public string rawtemplate = System.IO.File.ReadAllText(@"BlazorDapperTemplate.txt");
    public void generate()
    {

        string nsname = codetemplate.NamespaceName;
        string tableinfo = @codetemplate.TableDesign;
        // Find the table name
        tableinfo = tableinfo.Replace("CREATE TABLE [dbo].[", "");
        // If there's anything after the last field definition, remove all that.
        int endsat = tableinfo.IndexOf("CONSTRAINT");
        if (endsat > 0)
        {
            tableinfo = tableinfo.Substring(0, endsat);
        }
        tableinfo = tableinfo.Trim();
        tablename = tableinfo.Substring(0, tableinfo.IndexOf("]")).Replace("\n", "");
        char[] a = tablename.ToCharArray();
        a[0] = char.ToUpper(a[0]);
        string classname = new string(a);
        if (classname.Substring(0, 3) == "Tbl")
        {
            classname = classname.Substring(3);
        }
        string classservice = classname + "Service";
        string objectname = classname.ToLower();
        string listpagename = objectname + "list";
        string listname = new Pluralizer().Pluralize(objectname);
        string fieldlist = @codetemplate.TableDesign;
        int firstparen = tableinfo.IndexOf("(");
        tableinfo = tableinfo.Substring(firstparen + 1);
        tableinfo = tableinfo.Replace("\n", "").Replace("\t", "");


        var tablefields = NormalizeFieldNames(tableinfo, objectname);


        rawtemplate = rawtemplate.Replace("@@OBJECT", objectname);
        rawtemplate = rawtemplate.Replace("@@NAMESPACE", nsname);
        rawtemplate = rawtemplate.Replace("@@CLASSNAME", classname);
        rawtemplate = rawtemplate.Replace("@@CLASSService", classservice);
        rawtemplate = rawtemplate.Replace("@@objectname", objectname);
        rawtemplate = rawtemplate.Replace("@@LISTPAGENAME", objectname + "list");
        rawtemplate = rawtemplate.Replace("@@objectlist", listname);
        rawtemplate = rawtemplate.Replace("@@listpagename", listpagename);

        @codetemplate.GeneratedCode = rawtemplate;
    }

    public List<Tablefield> NormalizeFieldNames(string rawtext, string objectname)
    {
        Tablefield tblfield = new Tablefield();
        List<Tablefield> fieldlist = new List<Tablefield>();
        string[] fldnames = rawtext.Split("NULL,");
        string tableheadings = "";
        string tablerows = "";
        string confirmdeleterows = "";
        string parametersAddUpdateOnly = string.Empty;
        int iCounter = 1;
        foreach (var fld in fldnames)
        {
            string working = fld.Trim();
            if (working.Length > 0)
            {
                string sfldname = working.Substring(1, working.IndexOf("]") - 1);
                sfldname = char.ToUpper(sfldname[0]) + sfldname.Substring(1);
                // Table headings (td tags) - don't show first field (primary key)
                if (iCounter > 1)
                {
                    tableheadings += "<th>" + sfldname + "</th>";
                    tablerows += "<td>@" + objectname + "." + sfldname + "</td>";
                }

                bool isRequired = (working.Substring(working.Length - 4) == " NOT");
                // Isolate the data time
                string datatype = working.Substring(working.IndexOf("]") + 2);
                datatype = datatype.Replace("IDENTITY(1,1) ", "");
                datatype = datatype.Replace("IDENTITY (1, 1) ", "");
                datatype = datatype.Replace("NULL", "").Replace("NOT", "");
                datatype = datatype.Replace("[", "").Replace("]", "").Trim();

                //Remove the parens and number (if any) from the datatype.
                string temptype = RemoveNonAlpha(datatype).Trim().ToLower();
                string nettype = TypeMapper.GetNetType(temptype);
                string dbtype = TypeMapper.GetDBType(temptype);
                // If it's any kind of "char" field, grab the length
                int maxlength = 0;
                if (datatype.Contains("char"))
                {
                    // Look for the length if it's any kind of char field.
                    string charlength = RemoveAlpha(datatype);
                    int number;
                    bool success = Int32.TryParse(charlength, out number);
                    if (success)
                    {
                        maxlength = number;
                    }
                }
                tblfield = new Tablefield(sfldname, datatype, nettype, dbtype, maxlength, isRequired);
                fieldlist.Add(tblfield);
                iCounter += 1;
            }
        }

        // Looping through here, throws error in generate() method.
        iCounter = 1;

        string sproc_oneparam = "";
        string sproc_allparams = "";
        string sproc_insertparams = "";
        string cappedType = "";


        foreach (Tablefield fld in fieldlist)
        {
            if (fld.IsRequired)
            {
                modelfield += "[Required]\n";
            }
            if (fld.Length > 0)
            {
                modelfield += "[StringLength(" + fld.Length + ")]\n";
            }
            modelfield += "public " + fld.Codetype + " " + fld.Fieldname + " { get; set; }\n";
            sproc_allparams += "@" + fld.Fieldname + " " + fld.SQLtype + ",\n";
            // The first field is assumed to be the key, so we don't include that on paramters for Insert sproc
            if (iCounter != 1)
            {
                sproc_insertparams += "@" + fld.Fieldname + " " + fld.SQLtype + ",\n";
            }
            if (iCounter == 1)
            {
                sproc_oneparam = "@" + fld.Fieldname + " " + fld.SQLtype;
                primaryKey = fld.Fieldname;
                // The Update stored proc requires the primary key as a parameter, insert doesn't.
                parametersAddUpdateOnly = "parameters.Add(" + Convert.ToChar(34) + fld.Fieldname + Convert.ToChar(34) + ", " + objectname + "." + fld.Fieldname + ", DbType." + fld.DBtype + ");\n";
                sqldelete = "DELETE FROM " + tablename + " WHERE " + primaryKey + " = @" + primaryKey;
                sqlselectall = "SELECT " + primaryKey;
                sqlselectone = "SELECT " + primaryKey;
                sqlinsert = "INSERT INTO " + tablename + "(";
                sqlupdate = "UPDATE " + tablename + " SET ";
                sqlsearch = "SELECT * FROM " + tablename + " WHERE ";
            }

            // ===================================================================================================== Input tags for adding and editing, never the primary key.
            if (iCounter > 1)
            {
                parametersadd += "parameters.Add(" + Convert.ToChar(34) + fld.Fieldname + Convert.ToChar(34) + ", " + objectname + "." + fld.Fieldname + ", DbType." + fld.DBtype + ");\n";
                //inputtag += "<tr><td>" + fld.Fieldname + ":</td><td><input type=" + Convert.ToChar(34) + TypeMapper.GetHtmlType(fld.Codetype) + Convert.ToChar(34) + " @bind=" + Convert.ToChar(34) + objectname + "." + fld.Fieldname + Convert.ToChar(34);
                cappedType = TypeMapper.GetHtmlType(fld.Codetype);
                cappedType = char.ToUpper(cappedType[0]) + cappedType.Substring(1);
                //If the data type in SQL is Text, then use TextArea rather than Input'
                if (fld.SQLtype == "text") {
                    cappedType = "TextArea";
                }
                inputtag += "<tr><td><label for = '" + fld.Fieldname + "'>" + fld.Fieldname + ":</label></td><td>\n<Input" + cappedType + " @bind-Value = " + Convert.ToChar(34) + objectname + "." + fld.Fieldname + Convert.ToChar(34) + " class='form-control'";
                //The date ranges don't work in the model, so adding here.
                if (fld.SQLtype.Contains("date"))
                {
                    inputtag += " min=" + Convert.ToChar(34) + "1753-01-01" + Convert.ToChar(34) + " max=" + Convert.ToChar(34) + "9999-12-31" + Convert.ToChar(34);
                }

                inputtag += "/></td></tr>\n";

                //if (TypeMapper.GetHtmlType(fld.Codetype) == "date")
                //{
                //    inputtag += " min=" + Convert.ToChar(34) + "1753-01-01" + Convert.ToChar(34) + " max=" + Convert.ToChar(34) + "9999-12-31" + Convert.ToChar(34);
                //}
                //if (fld.Length > 0)
                //{
                //    inputtag += " maxlength=" + fld.Length.ToString();
                //}
                //if (fld.Codetype == "decimal")
                //{
                //    inputtag += " step=" + Convert.ToChar(34) + "any" + Convert.ToChar(34);
                //}
                //if (fld.IsRequired)
                //{
                //    inputtag += " required ";
                //}
                //inputtag += "></td></tr>";
                confirmdeleterows += "<tr><td>" + fld.Fieldname + ":</td><td>@" + objectname + "." + fld.Fieldname + "</td></tr>\n";

                sqlselectall += ", " + fld.Fieldname;
                sqlselectone += ", " + fld.Fieldname;
                sqlfieldsinsert1 += fld.Fieldname + ", ";
                sqlfieldsinsert2 += "@" + fld.Fieldname + ", ";
                sqlupdate += fld.Fieldname + " = @" + fld.Fieldname + ", ";
                //convert dates to string for Like search
                if (fld.SQLtype.Contains("date"))
                {
                    //sqlsearchflds += "CONVERT(varchar(12)," + fld.Fieldname + ",101) AS " + fld.Fieldname + ", ";
                    sqlsearch += "CONVERT(varchar(12)," + fld.Fieldname + ",101) LIKE + '%' + @param + '%' OR ";
                }
                //convert numbers to string for like search
                if (fld.SQLtype.Contains("int") || fld.SQLtype.Contains("decimal") || fld.SQLtype.Contains("money"))
                {
                    //sqlsearchflds += "CAST(" + fld.Fieldname + " AS varchar(20)) AS " + fld.Fieldname + ",";
                    sqlsearch += "CAST(" + fld.Fieldname + " AS varchar(20)) LIKE '%' + @param + '%' OR ";
                }
                //No convertsion for text fields
                if (fld.SQLtype.Contains("text") || fld.SQLtype.Contains("char"))
                {
                    //sqlsearchflds += fld.Fieldname + ",";
                    sqlsearch += fld.Fieldname + " LIKE '%' + @param + '%' OR ";
                }
            }
            iCounter += 1;
        }
        sproc_allparams = sproc_allparams.Substring(0, sproc_allparams.Length - 2);
        sproc_insertparams = sproc_insertparams.Substring(0, sproc_insertparams.Length - 2);
        rawtemplate = rawtemplate.Replace("@@PK", primaryKey);
        rawtemplate = rawtemplate.Replace("@@spOneParam", sproc_oneparam);
        rawtemplate = rawtemplate.Replace("@@spAllParams", sproc_allparams);
        rawtemplate = rawtemplate.Replace("@@spInsertParams", sproc_insertparams);
        rawtemplate = rawtemplate.Replace("@@OBJECTNAME", objectname);
        rawtemplate = rawtemplate.Replace("@@MODELCODE", modelfield);
        rawtemplate = rawtemplate.Replace("@@PARAMETERADDUPDATEONLY", parametersAddUpdateOnly);
        rawtemplate = rawtemplate.Replace("@@PARAMETERSADD", parametersadd);
        rawtemplate = rawtemplate.Replace("@@PRIMARYKEY", primaryKey);
        rawtemplate = rawtemplate.Replace("@@INPUTONEROWS", inputtag);
        rawtemplate = rawtemplate.Replace("@@FIELDNAMESTABLEHEADING", tableheadings);
        rawtemplate = rawtemplate.Replace("@@FIELDNAMESTABLEROW", tablerows);
        rawtemplate = rawtemplate.Replace("@@CONFIRMDELETEROWS", confirmdeleterows);
        //Remove extra comma and space at the end of field names.
        sqlfieldsinsert1 = sqlfieldsinsert1.Substring(0, sqlfieldsinsert1.Length - 2);
        sqlfieldsinsert2 = sqlfieldsinsert2.Substring(0, sqlfieldsinsert2.Length - 2);
        sqlupdate = sqlupdate.Substring(0, sqlupdate.Length - 2);
        sqlinsert += sqlfieldsinsert1 + ") VALUES (" + sqlfieldsinsert2 + ")";
        sqlupdate += " WHERE " + primaryKey + " = @" + primaryKey;
        sqlselectall += " FROM " + tablename;
        sqlselectone += " FROM " + tablename + " WHERE " + primaryKey + "= @" + primaryKey;
        rawtemplate = rawtemplate.Replace("@@SQLINSERT", sqlinsert);
        rawtemplate = rawtemplate.Replace("@@SQLUPDATE", sqlupdate);

        rawtemplate = rawtemplate.Replace("@@SQLSEARCH", sqlsearch.Substring(0, sqlsearch.Length-4));
        rawtemplate = rawtemplate.Replace("@@SQLSELECTALL", sqlselectall);
        rawtemplate = rawtemplate.Replace("@@SQLSELECTONE", sqlselectone);
        rawtemplate = rawtemplate.Replace("@@SQLDELETE", sqldelete);
        return fieldlist;
    }

    // Remove all numbers.
    public string RemoveNonAlpha(string input)
    {
        return Regex.Replace(input, @"[^a-zA-Z\._]", string.Empty);
    }

    // Remove all except numbers.
    public string RemoveAlpha(string input)
    {
        return Regex.Replace(input, @"[^0-9.]", string.Empty);
    } }
